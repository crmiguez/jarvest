transfomer.names = wget,xpath,xpathscrap,select,decorate,match,append,replace,compare,merge,post,one_to_one,setvar
wget.description = For each input string 's', performs an GET HTTP request to the URL 's' and returns its contents a new output
wget.template = wget(:ajax=>'false', :headers=>'{"Accept-Charset": "iso-8859-5, unicode-1-1;q=0.8"}', :userAgent=> 'Mozilla/5.0 (compatible; jARVEST; +http://sing.ei.uvigo.es/jarvest)')
xpath.description = For each input string 's', treat it as HTML by building its DOM tree and run a given XPath expression. Each matched content will be returned as a new output
xpath.template = xpath(:XPath=>'//a[contains(@href,"details.php", @href)]/@href', :IfNoMatch=>'', :addTBody=>'false')
xpathscrap.description = For each input string 's', treat it as HTML by building its DOM tree and run a given XPath expression. The whole inner XML of each matched content will be retrieved
xpathscrap.template = xpathscrap(:XPath=>'//table[@id="data"]', :IfNoMatch=>'', :addTBody=>'false')
select.description = For each input string 's', treat it as HTML, select nodes with a given CSS selector expression. For each matched node, a) the inner combined text (default), b) an specified attribute or c) the inner HTML, can be returned
select.template = select(:selector=>'table#data', :IfNoMatch=>'', :attribute=>'remove_this_if_you_want_inner_text_or_HTML', :innerHTML=>'false')
decorate.description = For each input string 's', generate a new output by prepending a 'head' and appending a 'tail'
decorate.template = decorate(:head=>'<item>', :tail=>'</item>')
match.description = For each input string 's', matches a regular expression with only one capture (between parenthesis). Each captured result will be returned as a new output
match.template = match(:pattern=>'<a>(.*?)</a>', :ifNoMatch=>'')
append.description = All input strings are returned as a new output (if any), plus a given additional output string at the end
append.template = append('http://sing.ei.uvigo.es')
replace.description = For each input string 's', generate a new output by replacing each match of a regular expression with a given string
replace.template = replace(:sourceRE=>'foo', :dest=>'bar')
compare.description = For each input string 's', compares it with a given value 'v' as String|Date|Number, and generates new output by prefixing the input with a different prefix if 's' is less, equals, greater than 'v', or an error has been produced in comparison
compare.template = compare(:compareWith=>'value', :compareAs=>'Date|String|Number', :prefixIfGreater=>'_GREATER_', :prefixIfLess=>'_LESS_', :prefixIfEquals=>'_EQUALS_', :prefixIfError=>'_ERROR_')
merge.description = Collapses all inputs as a single output
merge.template = merge
post.description = Performs a POST HTTP request to an URL given as parameters. The output of this harverster can be (i) the input strings with no transformations or (ii) the output of the server as a single output (inputs are ignored). Note: All returned cookies will be kept during the rest of the harvester execution (including further wget/post requests). In other words, you can use this harverster to perform login on cookie-based session sites
post.template = post(:URL=>'the_action_url', :queryString=>'user=foo&pass=bar', :querySeparator=>'&', :outputHTTPOutpus=>'false', :userAgent=>'Mozilla/5.0 (compatible; jARVEST; +http://sing.ei.uvigo.es/jarvest)', :ajax=>'false', :headers=>'{"Accept-Charset": "iso-8859-5, unicode-1-1;q=0.8"}')
one_to_one.description=Treats each input of the parent independently, and ensures only <=1 outputs per input. That is, each output of the parent will be forwarded to the child block one at a time. The child block's outputs will be collapsed before the next output of the parent is forwarded again. For example, if we have multiple input sites and we want to make an xpath query over each site. Each xpath query could return more than one output, so if we want to keep the correspondence between each input url with their xpath query results, we must use the one_to_one approach
one_to_one.template = one_to_one {     }
setvar.description = Defines a "global variable" with a given name and value. The variable can be retrieved afterwards with %%varname%%. This transformer does not modify the inputs, it only forwards them
setvar.template = setvar(:name=>'myvar', :value=>'%%0%%', :inputFilter=>'0')